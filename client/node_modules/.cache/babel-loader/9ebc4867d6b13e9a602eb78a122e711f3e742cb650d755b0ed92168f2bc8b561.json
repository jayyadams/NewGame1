{"ast":null,"code":"var _jsxFileName = \"/home/jayyadams/Development/code/coding/NewGame1/client/src/components/Combat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport eventEmitter from './EventEmitter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Combat = ({\n  characterId,\n  enterCombat,\n  exitCombat\n}) => {\n  _s();\n  const [monster, setMonster] = useState(null);\n  const [combatEnded, setCombatEnded] = useState(false);\n  const [combatLog, setCombatLog] = useState([]);\n  const navigate = useNavigate();\n  const [currentTurn, setCurrentTurn] = useState('player');\n  const fetchCurrentMonster = async () => {\n    try {\n      const response = await axios.get('/current_monster');\n      setMonster(response.data);\n    } catch (error) {\n      console.error('Error fetching current monster:', error);\n    }\n  };\n  const isPlayersTurn = currentTurn === 'player';\n  useEffect(() => {\n    initiateCombat();\n    enterCombat();\n    fetchCurrentMonster();\n  }, []);\n  const initiateCombat = async () => {\n    try {\n      await axios.post('/initiate_combat');\n    } catch (error) {\n      console.error('Error initiating combat:', error);\n    }\n  };\n  const handlePlayerAction = async (actionType, itemId = null) => {\n    try {\n      const response = await axios.post('/player_combat_action', {\n        action: actionType,\n        itemId\n      });\n      setCombatLog(prevLog => {\n        const newLog = [response.data.outcome, ...prevLog];\n        return newLog.slice(0, 12);\n      });\n      if (response.data.updatedMonsterHp !== undefined) {\n        setMonster(prevMonster => ({\n          ...prevMonster,\n          current_hp: response.data.updatedMonsterHp\n        }));\n      }\n      if (actionType === 'Flee' && response.data.outcome.includes('Successfully fled from combat')) {\n        exitCombat();\n        navigate('/dungeon');\n      } else if (response.data.outcome.includes('Monster defeated')) {\n        handleEndCombat();\n      } else {\n        setCurrentTurn('monster');\n        setTimeout(() => {\n          handleMonsterAction();\n        }, 1000);\n      }\n    } catch (error) {\n      console.error('Error during player action:', error);\n    }\n  };\n  const handleMonsterAction = async () => {\n    try {\n      const payload = {\n        character_id: characterId,\n        monster_id: monster.id,\n        turn: 'Monster'\n      };\n      const response = await axios.post('/monster_combat_action', payload);\n      setCombatLog(prevLog => {\n        const newLog = [response.data.outcome, ...prevLog];\n        return newLog.slice(0, 12);\n      });\n      if (response.data.characterDefeated) {\n        navigate('/game-over');\n      } else {\n        setCurrentTurn('player');\n        eventEmitter.emit('playerDataChanged');\n      }\n    } catch (error) {\n      console.error('Error during monster action:', error);\n    }\n  };\n  const handleEndCombat = async () => {\n    try {\n      const response = await axios.post('/end_combat');\n      const data = response.data;\n      let newLogMessages = [];\n      if (data.level_up) {\n        newLogMessages.push(`You leveled up to level ${data.level_up.new_level}`);\n      }\n      if (data.loot) {\n        newLogMessages.push(...data.loot.map(item => `You found ${item}`));\n      }\n      if (data.quest_progress) {\n        newLogMessages.push('Quest progress updated');\n      }\n      if (data.new_dungeon_level) {\n        newLogMessages.push(`You can now access dungeon level ${data.new_dungeon_level}`);\n      }\n      setCombatLog(prevLog => {\n        const updatedLog = [...newLogMessages, ...prevLog];\n        return updatedLog.slice(0, 12);\n      });\n      setCombatEnded(true);\n      eventEmitter.emit('playerDataChanged');\n      exitCombat();\n    } catch (error) {\n      console.error('Error during end combat:', error);\n    }\n  };\n  const handleNextFloor = async () => {\n    try {\n      const response = await axios.post('/next_floor', {\n        characterId\n      });\n      if (response.status === 200) {\n        setCombatEnded(false);\n        setCombatLog([]);\n        fetchCurrentMonster();\n        enterCombat();\n      } else {\n        console.error('Unexpected response status:', response.status);\n      }\n    } catch (error) {\n      console.error('Error resetting current floor:', error);\n    }\n  };\n  const handleRepeatFloor = async () => {\n    try {\n      const response = await axios.post('/reset_current_floor', {\n        characterId\n      });\n      if (response.status === 200) {\n        setCombatEnded(false);\n        setCombatLog([]);\n        fetchCurrentMonster();\n        enterCombat();\n      } else {\n        console.error('Unexpected response status:', response.status);\n      }\n    } catch (error) {\n      console.error('Error resetting current floor:', error);\n    }\n  };\n  const handleReturnToDungeonEntrance = () => {\n    exitCombat();\n    navigate('/dungeon');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"combat-container\",\n    children: [monster && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"combat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Floor \", monster.level, \" Combat\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"monster-info\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [monster.name, \" - HP: \", monster.current_hp, \" / \", monster.max_hp]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 17\n    }, this), combatEnded && monster && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"combat-options\",\n      children: [monster.level < 100 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextFloor,\n        children: \"Next Floor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRepeatFloor,\n        children: \"Repeat Floor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReturnToDungeonEntrance,\n        children: \"Return to Dungeon Entrance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 17\n    }, this), !combatEnded && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"combat-options\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePlayerAction('Attack Melee'),\n        disabled: !isPlayersTurn,\n        children: \"Melee Attack\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePlayerAction('Attack Ranged'),\n        disabled: !isPlayersTurn,\n        children: \"Ranged Attack\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePlayerAction('Flee'),\n        disabled: !isPlayersTurn,\n        children: \"Flee\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"combat-log\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Combat Log\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }, this), combatLog.map((log, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: log\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 48\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 9\n  }, this);\n};\n_s(Combat, \"yJxgBBmHGpuSL2PW95JRgRyCQbo=\", false, function () {\n  return [useNavigate];\n});\n_c = Combat;\nexport default Combat;\nvar _c;\n$RefreshReg$(_c, \"Combat\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","axios","eventEmitter","jsxDEV","_jsxDEV","Combat","characterId","enterCombat","exitCombat","_s","monster","setMonster","combatEnded","setCombatEnded","combatLog","setCombatLog","navigate","currentTurn","setCurrentTurn","fetchCurrentMonster","response","get","data","error","console","isPlayersTurn","initiateCombat","post","handlePlayerAction","actionType","itemId","action","prevLog","newLog","outcome","slice","updatedMonsterHp","undefined","prevMonster","current_hp","includes","handleEndCombat","setTimeout","handleMonsterAction","payload","character_id","monster_id","id","turn","characterDefeated","emit","newLogMessages","level_up","push","new_level","loot","map","item","quest_progress","new_dungeon_level","updatedLog","handleNextFloor","status","handleRepeatFloor","handleReturnToDungeonEntrance","className","children","level","fileName","_jsxFileName","lineNumber","columnNumber","name","max_hp","onClick","disabled","log","index","_c","$RefreshReg$"],"sources":["/home/jayyadams/Development/code/coding/NewGame1/client/src/components/Combat.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport eventEmitter from './EventEmitter';\n\nconst Combat = ({ characterId, enterCombat, exitCombat }) => {\n    const [monster, setMonster] = useState(null);\n    const [combatEnded, setCombatEnded] = useState(false);\n    const [combatLog, setCombatLog] = useState([]);\n    const navigate = useNavigate();\n\n    const [currentTurn, setCurrentTurn] = useState('player');\n\n    const fetchCurrentMonster = async () => {\n        try {\n            const response = await axios.get('/current_monster');\n            setMonster(response.data);\n        } catch (error) {\n            console.error('Error fetching current monster:', error);\n        }\n    };\n\n    const isPlayersTurn = currentTurn === 'player';\n\n    useEffect(() => {\n        initiateCombat();\n        enterCombat();\n        fetchCurrentMonster();\n    }, []);\n\n    const initiateCombat = async () => {\n        try {\n            await axios.post('/initiate_combat');\n        } catch (error) {\n            console.error('Error initiating combat:', error);\n        }\n    };\n\n    const handlePlayerAction = async (actionType, itemId = null) => {\n        try {\n            const response = await axios.post('/player_combat_action', {\n                action: actionType,\n                itemId\n            });\n    \n            setCombatLog(prevLog => {\n                const newLog = [response.data.outcome, ...prevLog];\n                return newLog.slice(0, 12);\n            });\n    \n            if (response.data.updatedMonsterHp !== undefined) {\n                setMonster(prevMonster => ({\n                    ...prevMonster,\n                    current_hp: response.data.updatedMonsterHp\n                }));\n            }\n    \n            if (actionType === 'Flee' && response.data.outcome.includes('Successfully fled from combat')) {\n                exitCombat();\n                navigate('/dungeon');\n            } else if (response.data.outcome.includes('Monster defeated')) {\n                handleEndCombat();\n            } else {\n                setCurrentTurn('monster');\n                setTimeout(() => {\n                    handleMonsterAction();\n                }, 1000);\n            }\n        } catch (error) {\n            console.error('Error during player action:', error);\n        }\n    };\n\n    const handleMonsterAction = async () => {\n        try {\n            const payload = {\n                character_id: characterId,\n                monster_id: monster.id,\n                turn: 'Monster'\n            };\n\n            const response = await axios.post('/monster_combat_action', payload);\n\n            setCombatLog(prevLog => {\n                const newLog = [response.data.outcome, ...prevLog];\n                return newLog.slice(0, 12);\n            });\n\n            if (response.data.characterDefeated) {\n                navigate('/game-over');\n            } else {\n                setCurrentTurn('player');\n                eventEmitter.emit('playerDataChanged');\n            }\n        } catch (error) {\n            console.error('Error during monster action:', error);\n        }\n    };\n\n    const handleEndCombat = async () => {\n        try {\n            const response = await axios.post('/end_combat');\n            const data = response.data;\n\n            let newLogMessages = [];\n\n            if (data.level_up) {\n                newLogMessages.push(`You leveled up to level ${data.level_up.new_level}`);\n            }\n            if (data.loot) {\n                newLogMessages.push(...data.loot.map(item => `You found ${item}`));\n            }\n            if (data.quest_progress) {\n                newLogMessages.push('Quest progress updated');\n            }\n            if (data.new_dungeon_level) {\n                newLogMessages.push(`You can now access dungeon level ${data.new_dungeon_level}`);\n            }\n\n            setCombatLog(prevLog => {\n                const updatedLog = [...newLogMessages, ...prevLog];\n                return updatedLog.slice(0, 12);\n            });\n    \n            setCombatEnded(true);\n            eventEmitter.emit('playerDataChanged');\n            exitCombat();\n        } catch (error) {\n            console.error('Error during end combat:', error);\n        }\n    };\n\n    const handleNextFloor = async () => {\n        try {\n            const response = await axios.post('/next_floor', { characterId });\n            if (response.status === 200) {\n                setCombatEnded(false);\n                setCombatLog([]);\n\n                fetchCurrentMonster();\n                enterCombat();\n            } else {\n                console.error('Unexpected response status:', response.status);\n            }\n        } catch (error) {\n            console.error('Error resetting current floor:', error);\n        }\n    };\n\n    const handleRepeatFloor = async () => {\n        try {\n            const response = await axios.post('/reset_current_floor', { characterId });\n            if (response.status === 200) {\n                setCombatEnded(false);\n                setCombatLog([]);\n\n                fetchCurrentMonster();\n                enterCombat();\n            } else {\n                console.error('Unexpected response status:', response.status);\n            }\n        } catch (error) {\n            console.error('Error resetting current floor:', error);\n        }\n    };\n\n    const handleReturnToDungeonEntrance = () => {\n        exitCombat();\n        navigate('/dungeon');\n    };\n\n    return (\n        <div className=\"combat-container\">\n            {monster && (\n                <div className=\"combat-header\">\n                    <h2>Floor {monster.level} Combat</h2>\n                    <div className=\"monster-info\">\n                        <p>{monster.name} - HP: {monster.current_hp} / {monster.max_hp}</p>\n                    </div>\n                </div>\n            )}\n\n            {combatEnded && monster && (\n                <div className=\"combat-options\">\n                    {monster.level < 100 && (\n                        <button onClick={handleNextFloor}>Next Floor</button>\n                    )}\n                    <button onClick={handleRepeatFloor}>Repeat Floor</button>\n                    <button onClick={handleReturnToDungeonEntrance}>Return to Dungeon Entrance</button>\n                </div>\n            )}\n\n            {!combatEnded && (\n                <div className=\"combat-options\">\n                    <button onClick={() => handlePlayerAction('Attack Melee')} disabled={!isPlayersTurn}>Melee Attack</button>\n                    <button onClick={() => handlePlayerAction('Attack Ranged')} disabled={!isPlayersTurn}>Ranged Attack</button>\n                    <button onClick={() => handlePlayerAction('Flee')} disabled={!isPlayersTurn}>Flee</button>\n                </div>\n            )}\n\n            <div className=\"combat-log\">\n                <h3>Combat Log</h3>\n                {combatLog.map((log, index) => <p key={index}>{log}</p>)}\n            </div>\n        </div>\n    );\n};\n\nexport default Combat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}